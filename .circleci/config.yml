version: 2
jobs:
  checkout_code:
    docker:
      - image: circleci/node:8.9.3
    working_directory: ~/wellcomecollection.org
    steps:
      - checkout
      - save_cache:
          key: repo_{{ .Environment.CIRCLE_SHA1 }}
          paths:
            -  ~/wellcomecollection.org
  catalogue:
    docker:
      - image: circleci/node:8.9.3
    working_directory: ~/wellcomecollection.org/catalogue/webapp
    steps:
      - restore_cache:
          key: repo_{{ .Environment.CIRCLE_SHA1 }}
      - add_ssh_keys
      - setup_remote_docker
      - run:
          name: Docker build
          command: docker-compose build
      - run:
          name: Docker push
          command: |
            docker login --username $DOCKER_USER --password $DOCKER_PASS
            docker-compose push
      - run:
          name: Next report
          command: |
            yarn
            BUILD_HASH=${CIRCLE_SHA1} BUNDLE_ANALYZE=both yarn build
            # Taken from
            # http://docs.aws.amazon.com/cli/latest/userguide/awscli-install-linux.html
            sudo apt-get -y -qq update
            sudo apt-get -y -qq install python3.4-dev
            curl -O https://bootstrap.pypa.io/get-pip.py
            python3.4 get-pip.py --user
            export PATH=~/.local/bin:$PATH
            pip install awscli --upgrade --user
            pushd .dist
              cp browser.${CIRCLE_SHA1}.html browser.latest.html
              cp browser.${CIRCLE_SHA1}.json browser.latest.json
              cp server.${CIRCLE_SHA1}.html server.latest.html
              cp server.${CIRCLE_SHA1}.json server.latest.json
              aws s3 sync --only-show-errors . s3://dash.wellcomecollection.org/bundles
            popd
      - save_cache:
          key: catalogue_modules_circleci_node_8_{{ checksum "yarn.lock" }}
          paths:
            -  node_modules
  root_tests:
    docker:
      - image: circleci/node:8.9.3
    working_directory: ~/wellcomecollection.org
    steps:
      - restore_cache:
          key: repo_{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: root_modules_circleci_node_8_{{ checksum "yarn.lock" }}
      - run:
          name: Install root modules
          command: yarn install
      - run:
          name: Flow
          command: yarn flow
      - run:
          name: Pa11y report
          command: |
            # TODO: Let's bake this into a container
            sudo apt-get -y -qq update
            sudo apt-get -y -qq install python3.4-dev
            curl -O https://bootstrap.pypa.io/get-pip.py
            python3.4 get-pip.py --user
            export PATH=~/.local/bin:$PATH
            pip install awscli --upgrade --user
            node pa11y_report.js
            aws s3 cp --only-show-errors ./pa11y_report.html s3://dash.wellcomecollection.org/pa11y/report.${CIRCLE_SHA1}.html
            aws s3 cp --only-show-errors ./pa11y_report.html s3://dash.wellcomecollection.org/pa11y/report.latest.html
      - save_cache:
          key: root_modules_circleci_node_8_{{ checksum "yarn.lock" }}
          paths:
            -  node_modules
  install_server_modules:
    docker:
      - image: circleci/node:8.9.3
    working_directory: ~/wellcomecollection.org/server
    steps:
      - restore_cache:
          key: repo_{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Install server modules
          command: yarn install --production
      - save_cache:
          key: server_modules_circleci_node_8_{{ checksum "yarn.lock" }}
          paths:
            -  node_modules
  install_common_modules:
    docker:
      - image: circleci/node:8.9.3
    working_directory: ~/wellcomecollection.org/common
    steps:
      - restore_cache:
          key: repo_{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Install common modules
          command: yarn install
      - save_cache:
          key: common_modules_circleci_node_8_{{ checksum "yarn.lock" }}
          paths:
            -  node_modules
  build_client:
    docker:
      - image: circleci/node:8.9.3
    working_directory: ~/wellcomecollection.org/client
    steps:
      - restore_cache:
          key: repo_{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Install client modules
          command: yarn install
      - run:
          name: Build client assets
          command: yarn run compile
      - save_cache:
          key: client_modules_circleci_node_8_{{ checksum "yarn.lock" }}
          paths:
            -  node_modules
      - save_cache:
          key: built_dist_{{ .Environment.CIRCLE_SHA1 }}
          paths:
            -  ~/wellcomecollection.org/dist
  build_exhibitions_webapp:
    docker:
      - image: circleci/node:8.9.3
    working_directory: ~/wellcomecollection.org/exhibitions/app
    steps:
      - restore_cache:
          key: repo_{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: server_modules_circleci_node_8_{{ checksum "../../server/yarn.lock" }}
      - restore_cache:
          key: common_modules_circleci_node_8_{{ checksum "../../common/yarn.lock" }}
      - restore_cache:
          key: built_dist_{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Install modules
          command: yarn install
      - run:
          name: SHAME - Compile JS to SCSS
          command: pushd ../../client && yarn add gulp && npx gulp scss:compileJsToScss && popd
      - run:
          name: Build prod config
          command: pushd ../../ && ./build_prod_config.py && popd
      - run:
          name: Build
          command: yarn run app:build
      - save_cache:
          key: built_exhibitions_webapp_{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - .dist
  deploy_exhibitions_webapp:
    docker:
      - image: circleci/node:8.9.3
    working_directory: ~/wellcomecollection.org
    steps:
      - restore_cache:
          key: repo_{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: built_exhibitions_webapp_{{ .Environment.CIRCLE_SHA1 }}
      - add_ssh_keys
      - setup_remote_docker
      - run:
          name: Deploy
          command: |
            docker login --username $DOCKER_USER --password $DOCKER_PASS
            CONTAINER_TAG=${CIRCLE_SHA1} docker-compose --file ./build/exhibitions_webapp.yml build
            CONTAINER_TAG=${CIRCLE_SHA1} docker-compose --file ./build/exhibitions_webapp.yml push
  build_events_webapp:
    docker:
      - image: circleci/node:8.9.3
    working_directory: ~/wellcomecollection.org/events/app
    steps:
      - restore_cache:
          key: repo_{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: server_modules_circleci_node_8_{{ checksum "../../server/yarn.lock" }}
      - restore_cache:
          key: common_modules_circleci_node_8_{{ checksum "../../common/yarn.lock" }}
      - restore_cache:
          key: built_dist_{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Install modules
          command: yarn install
      - run:
          name: SHAME - Compile JS to SCSS
          command: pushd ../../client && yarn add gulp && npx gulp scss:compileJsToScss && popd
      - run:
          name: Build prod config
          command: pushd ../../ && ./build_prod_config.py && popd
      - run:
          name: Build
          command: yarn run app:build
      - save_cache:
          key: built_events_webapp_{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - .dist
  deploy_events_webapp:
    docker:
      - image: circleci/node:8.9.3
    working_directory: ~/wellcomecollection.org
    steps:
      - restore_cache:
          key: repo_{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: built_events_webapp_{{ .Environment.CIRCLE_SHA1 }}
      - add_ssh_keys
      - setup_remote_docker
      - run:
          name: Deploy
          command: |
            docker login --username $DOCKER_USER --password $DOCKER_PASS
            CONTAINER_TAG=${CIRCLE_SHA1} docker-compose --file ./build/events_webapp.yml build
            CONTAINER_TAG=${CIRCLE_SHA1} docker-compose --file ./build/events_webapp.yml push
  build_whats_on_webapp:
    docker:
      - image: circleci/node:8.9.3
    working_directory: ~/wellcomecollection.org/whats_on/app
    steps:
      - restore_cache:
          key: repo_{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: server_modules_circleci_node_8_{{ checksum "../../server/yarn.lock" }}
      - restore_cache:
          key: common_modules_circleci_node_8_{{ checksum "../../common/yarn.lock" }}
      - restore_cache:
          key: built_dist_{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Install modules
          command: yarn install
      - run:
          name: SHAME - Compile JS to SCSS
          command: pushd ../../client && yarn add gulp && npx gulp scss:compileJsToScss && popd
      - run:
          name: Build prod config
          command: pushd ../../ && ./build_prod_config.py && popd
      - run:
          name: Build
          command: yarn run app:build
      - save_cache:
          key: built_whats_on_webapp_{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - .dist
  deploy_whats_on_webapp:
    docker:
      - image: circleci/node:8.9.3
    working_directory: ~/wellcomecollection.org
    steps:
      - restore_cache:
          key: repo_{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: built_whats_on_webapp_{{ .Environment.CIRCLE_SHA1 }}
      - add_ssh_keys
      - setup_remote_docker
      - run:
          name: Deploy
          command: |
            docker login --username $DOCKER_USER --password $DOCKER_PASS
            CONTAINER_TAG=${CIRCLE_SHA1} docker-compose --file ./build/whats_on_webapp.yml build
            CONTAINER_TAG=${CIRCLE_SHA1} docker-compose --file ./build/whats_on_webapp.yml push
  build_eventbrite_webapp:
    docker:
      - image: circleci/node:8.9.3
    working_directory: ~/wellcomecollection.org/eventbrite/app
    steps:
      - restore_cache:
          key: repo_{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: server_modules_circleci_node_8_{{ checksum "../../server/yarn.lock" }}
      - restore_cache:
          key: common_modules_circleci_node_8_{{ checksum "../../common/yarn.lock" }}
      - restore_cache:
          key: built_dist_{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Install modules
          command: yarn install
      - run:
          name: SHAME - Compile JS to SCSS
          command: pushd ../../client && yarn add gulp && npx gulp scss:compileJsToScss && popd
      - run:
          name: Build prod config
          command: pushd ../../ && ./build_prod_config.py && popd
      - run:
          name: Build
          command: yarn run app:build
      - save_cache:
          key: built_eventbrite_webapp_{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - .dist
  deploy_eventbrite_webapp:
    docker:
      - image: circleci/node:8.9.3
    working_directory: ~/wellcomecollection.org
    steps:
      - restore_cache:
          key: repo_{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: built_eventbrite_webapp_{{ .Environment.CIRCLE_SHA1 }}
      - add_ssh_keys
      - setup_remote_docker
      - run:
          name: Deploy
          command: |
            docker login --username $DOCKER_USER --password $DOCKER_PASS
            CONTAINER_TAG=${CIRCLE_SHA1} docker-compose --file ./build/eventbrite_webapp.yml build
            CONTAINER_TAG=${CIRCLE_SHA1} docker-compose --file ./build/eventbrite_webapp.yml push
  build_common_webapp:
    docker:
      - image: circleci/node:8.9.3
    working_directory: ~/wellcomecollection.org
    steps:
      - restore_cache:
          key: repo_{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: server_modules_circleci_node_8_{{ checksum "server/yarn.lock" }}
      - restore_cache:
          key: common_modules_circleci_node_8_{{ checksum "common/yarn.lock" }}
      - restore_cache:
          key: built_dist_{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Build client
          command: ./build-client.sh
      - run:
          name: Build prod config
          command: ./build_prod_config.py
      - run:
          name: Build server
          command: ./build-server.sh $CIRCLE_SHA1
      - save_cache:
          key: built_server_{{ .Environment.CIRCLE_SHA1 }}
          paths:
            -  ~/wellcomecollection.org/server
      - save_cache:
          key: built_dist_{{ .Environment.CIRCLE_SHA1 }}
          paths:
            -  ~/wellcomecollection.org/dist
  test_common_webapp:
    docker:
      - image: circleci/node:8.9.3
    working_directory: ~/wellcomecollection.org
    steps:
      - restore_cache:
          key: repo_{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: server_modules_circleci_node_8_{{ checksum "server/yarn.lock" }}
      - restore_cache:
          key: common_modules_circleci_node_8_{{ checksum "common/yarn.lock" }}
      - restore_cache:
          key: built_server_{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Test server
          command: pushd server && yarn run test && popd
  deploy_common_webapp:
    docker:
      - image: circleci/node:8.9.3
    working_directory: ~/wellcomecollection.org
    steps:
      - restore_cache:
          key: repo_{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: built_server_{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: built_dist_{{ .Environment.CIRCLE_SHA1 }}
      - add_ssh_keys
      - setup_remote_docker
      - run:
          name: Deploy
          command: |
            docker login --username $DOCKER_USER --password $DOCKER_PASS
            python ./.circleci/deploy_and_build_docker.py './' 'wellcome/wellcomecollection' $CIRCLE_SHA1
            python ./.circleci/deploy_and_build_docker.py './nginx-proxy' 'wellcome/wellcomecollection-nginx-proxy' $CIRCLE_SHA1
            python ./.circleci/deploy_and_build_docker.py './router' 'wellcome/wellcomecollection-router' $CIRCLE_SHA1
            ./build-speedtracker.sh
  deploy_assets:
      docker:
        - image: node:8.9.3
      working_directory: /home/circleci/wellcomecollection.org/dist
      steps:
        - restore_cache:
            key: built_dist_{{ .Environment.CIRCLE_SHA1 }}
        - add_ssh_keys
        - run:
            name: Install AWS CLI
            command: |
              # Taken from
              # http://docs.aws.amazon.com/cli/latest/userguide/awscli-install-linux.html
              apt-get -y -qq update
              apt-get -y -qq install python3.4-dev
              curl -O https://bootstrap.pypa.io/get-pip.py
              python3.4 get-pip.py --user
              export PATH=~/.local/bin:$PATH
              pip install awscli --upgrade --user
              aws s3 sync --only-show-errors . s3://i.wellcomecollection.org
  deploy_cardigan:
    docker:
      - image: node:8.9.3
    working_directory: /home/circleci/wellcomecollection.org
    steps:
      - restore_cache:
          key: repo_{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: built_server_{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: built_dist_{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: common_modules_circleci_node_8_{{ checksum "./common/yarn.lock" }}
      - add_ssh_keys
      - run:
          name: Install AWS CLI
          command: |
            # Taken from
            # http://docs.aws.amazon.com/cli/latest/userguide/awscli-install-linux.html
            apt-get -y -qq update
            apt-get -y -qq install python3.4-dev
            curl -O https://bootstrap.pypa.io/get-pip.py
            python3.4 get-pip.py --user
            export PATH=~/.local/bin:$PATH
            pip install awscli --upgrade --user
            pwd
            ./build_and_deploy_cardigan.sh
workflows:
  version: 2
  build_and_deploy:
    jobs:
      - checkout_code
      - catalogue:
          requires:
            - checkout_code
      - install_server_modules:
          requires:
            - checkout_code
      - install_common_modules:
          requires:
            - checkout_code
      - root_tests:
          requires:
            - checkout_code
      - build_client:
          requires:
            - checkout_code
      - build_exhibitions_webapp:
          requires:
            - checkout_code
            - root_tests
            - build_client
            - install_server_modules
            - install_common_modules
      - build_whats_on_webapp:
          requires:
            - checkout_code
            - root_tests
            - build_client
            - install_server_modules
            - install_common_modules
      - build_events_webapp:
          requires:
            - checkout_code
            - root_tests
            - build_client
            - install_server_modules
            - install_common_modules
      - build_eventbrite_webapp:
          requires:
            - checkout_code
            - root_tests
            - build_client
            - install_server_modules
            - install_common_modules
      - build_common_webapp:
          requires:
            - checkout_code
            - root_tests
            - build_client
            - install_server_modules
            - install_common_modules
      - deploy_exhibitions_webapp:
          requires:
            - build_exhibitions_webapp
          filters:
            branches:
              only:
                - master
      - deploy_whats_on_webapp:
          requires:
            - build_whats_on_webapp
          filters:
            branches:
              only:
                - master
      - deploy_events_webapp:
          requires:
            - build_events_webapp
          filters:
            branches:
              only:
                - master
      - deploy_eventbrite_webapp:
          requires:
            - build_eventbrite_webapp
          filters:
            branches:
              only:
                - master
      - test_common_webapp:
          requires:
            - checkout_code
            - build_common_webapp
      - deploy_assets:
          requires:
            - test_common_webapp
          filters:
            branches:
              only:
                - master
      - deploy_common_webapp:
          requires:
            - test_common_webapp
          filters:
            branches:
              only:
                - master
      - deploy_cardigan:
          requires:
            - test_common_webapp
          filters:
            branches:
              only:
                - master
