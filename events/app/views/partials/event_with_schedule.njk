<div class="event-schedule row relative">
  <div class="absolute event-schedule__header-image bg-turquoise"></div>
  <div class="relative container bg-white {{ {s:3, m:5, l:5} | spacingClasses({padding: ['top', 'bottom']}) }}">
    <div class="grid">
      <div class="{{ {s: 12, m: 10, l: 8, xl: 9} | gridClasses }}">
        <h1 class="{{ {s: 'WB5', m: 'WB4', l: 'WB3'} | fontClasses }} {{ {s: 2} | spacingClasses({margin: ['bottom']}) }} {{ {s: 0} | spacingClasses({margin: ['top']}) }} font-purple">{{  event.title }}</h1>
        <div class="{{ {s: 2, l: 10} | spacingClasses({margin: ['bottom']}) }}">
          {{ event.times[0].range.startDateTime | formatDate }}, {{ event.times[0].range.startDateTime | formatTime }}&mdash;{{ event.times[0].range.endDateTime | formatTime }} | <span>{{ event.schedule.length }} events</span>
        </div>
      </div>
      <div class="{{ {s: 12, m: 12, l: 4, xl: 3} | gridClasses }} event-schedule__free {{ {s: 10, l: 0} | spacingClasses({margin: ['bottom']}) }}">
        <span class="inline-block bg-yellow {{ {s: 'WB7'} | fontClasses }} {{ {s: 2} | spacingClasses({padding: ['left', 'right']}) }} {{ {s: 1} | spacingClasses({padding: ['top', 'bottom']}) }} rounded-diagonal">All events are free</span>
      </div>
      <div class="{{ {s: 12, m: 10, l: 8, xl: 9} | gridClasses }}">
        {{ event.description | safe }}
      </div>
    </div>
  </div>

  <div class="container bg-white container--scroll touch-scroll">
    <div class="grid grid--scroll">
      {% for scheduledEvent in event.schedule %}
        {% if loop.index < 4 %}
          <div class="grid__cell">
            <div class="rounded-corners overflow-hidden">
              {% set imageModel = {
                width: scheduledEvent.promo.image.width,
                height: scheduledEvent.promo.image.height,
                lazyload: true,
                title: scheduledEvent.promo.image.title,
                source: scheduledEvent.promo.image.source,
                copyright: scheduledEvent.promo.image.copyright,
                contentUrl: scheduledEvent.promo.image.contentUrl
              } %}
              {% set tasl = {name: 'Tasl', model: imageModel | objectAssign({sourceName: imageModel.source.name, sourceLink: imageModel.source.link})}
                if (imageModel.title or imageModel.source.name or imageModel.copyright.name or imageModel.license)
                else null
              %}
              {% componentJsx 'CaptionedImage', {},
                [{name: 'Image', model: imageModel}, tasl]
               %}
            </div>
          </div>
        {% endif %}
      {% endfor %}
    </div>
  </div>
  <div class="container bg-white">
    <hr class="divider divider--dashed" />
  </div>

  <div class="container bg-white {{ {s: 6} | spacingClasses({padding: ['bottom']}) }}">
    <div class="grid">
      <div class="{{ {s: 12, m: 12, l: 12, xl: 12} | gridClasses }}">
        <ul class="plain-list no-marin no-padding">
          {% for scheduledEvent in event.schedule %}
            {% componentJsx 'EventScheduleItem',
              {
                event: {
                  id: scheduledEvent.id,
                  times: scheduledEvent.times,
                  title: scheduledEvent.title,
                  place: scheduledEvent.place,
                  format: scheduledEvent.format,
                  isDropIn: scheduledEvent.isDropIn,
                  description: scheduledEvent.promo.caption,
                  interpretations: scheduledEvent.interpretations
                },
                eventInfo: {
                  eventbriteId: null,
                  isCompletelySoldOut: null
                }
              }
            %}
          {% endfor %}
        </ul>
      </div>
    </div>
  </div>
</div>
