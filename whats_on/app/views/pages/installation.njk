{% extends 'layout/default.njk' %}
{% block pageMeta %}
  {% set metaContent = {
    type: 'website',
    title: installation.title,
    description: installation.promo.caption,
    url: pageConfig.canonicalUri
  } %}
  {% component 'open-graph', { pageConfig: pageConfig, metaContent: metaContent } %}
  {% component 'twitter-card', { pageConfig: pageConfig, metaContent: metaContent } %}
  <meta name="description" content="{{ installation.description | prismicAsText | safe | striptags }}" />
{% endblock %}

{% block body %}
  {# {% set jsonLdExhibition = exhibition | objectAssign({safeDescription: exhibition.description | safe | striptags}) %} #}

  <script type="application/ld+json">
    {# {{ jsonLdExhibition | jsonLd('exhibitionLd') | safe }} #}
  </script>

  <div class="css-grid__container">
    <div class="css-grid">
      <div class="is-hidden-s is-hidden-m {{ {s:12, m:12, l:12, xl:12} | cssGridClasses }} {{ ({s: 4} | spacingClasses({ margin: ['top'] })) }}">
        {% componentJsx 'Tags', {tags: tags} %}
      </div>
    </div>

    {% if installation.featuredImageList.length > 0 %}
      <div class="is-hidden-l is-hidden-xl css-grid__cell--main">
        <div class="absolute {{ {s:2} | spacingClasses({margin: ['top', 'bottom']}) }}">
          {% componentJsx 'Tags', {tags: tags} %}
        </div>
      </div>
      <div class="is-hidden-l is-hidden-xl css-grid__cell--full">
        {% set imageModel = installation.featuredImageList[0] | objectAssign({lazyload: true}) %}

        {% set tasl = {name: 'Tasl', model: imageModel}
          if (imageModel.title or imageModel.source.name or imageModel.copyright.name or imageModel.license)
          else null
        %}

        {% componentJsx 'CaptionedImage', bodyPart.value, [
          {name: 'Image', model: imageModel},
          tasl
        ] %}
      </div>
    {% endif %}

    <div class="css-grid {{ {l: 2} | spacingClasses({margin: ['top']}) }}">
      <div class="css-grid__cell--secondary">
        <div class="bg-cream rounded-diagonal {{ {s: 4} | spacingClasses({padding: ['top', 'bottom', 'left', 'right']}) }} relative {{ {s: -4, l: 0} | spacingClasses({margin: ['top']}) }}">
          <div class="{{ {s:'HNM4'} | fontClasses }}">
            <div class="flex">
              <span>Installation</span>
            </div>
          </div>

          <h1 class="{{- [
            {s:'WB5', m:'WB4', xl:'WB3'} | fontClasses,
            {s: 2} | spacingClasses({margin: ['top']}),
            {s: 1} | spacingClasses({margin: ['bottom']})
          ].join(' ') -}}">
            {{ installation.title }}
          </h1>
          <h2 class="{{- [
            {s:'WB7', xl:'WB6'} | fontClasses,
            {s: 1} | spacingClasses({margin: ['top']}),
            {s: 1} | spacingClasses({margin: ['bottom']})
          ].join(' ') -}}">
            {{ installation.description | prismicAsHtml | safe }}
          </h2>

          <div class="flex flex--v-center {{ {s:'HNM5'} | fontClasses }} {{ {s:3} | spacingClasses({margin: ['bottom']}) }}">
            <span>
              Free admission
            </span>
            <span class="border-left-width-1 border-color-pumice {{ {s: 1} | spacingClasses({padding: ['left'], margin: ['left']}) }}">
              No ticket required
            </span>
          </div>

          <div class="{{ {s:'HNL4'} | fontClasses }}">
            <div class="border-top-width-1 border-color-pumice {{ {s: 2} | spacingClasses({padding: ['top', 'bottom']}) }}">
              <div class="flex {{ {s:1} | spacingClasses({margin: ['top', 'bottom']}) }}">
                <div class="{{ {s:1} | spacingClasses({margin:['right']}) }}">{% icon 'a11y' %}</div>
                <p class="no-margin">This installation is on level {{installation.place.level}}</p>
              </div>

              <div class="flex {{ {s:1} | spacingClasses({margin: ['top', 'bottom']}) }}">
                <div class="{{ {s:1} | spacingClasses({margin:['right']}) }}">{% icon 'a11y_visual' %}</div>
                <p class="no-margin">Step-free access is available to all floors of the building</p>
              </div>
            </div>
          </div>


          <div class="{{ {s:'HNL4'} | fontClasses }}">
            <div class="border-top-width-1 border-color-pumice {{ {s: 2} | spacingClasses({padding: ['top', 'bottom']}) }}">

            </div>
          </div>
        </div>
      </div>

      <div class="css-grid__cell--primary">
        <div class="is-hidden-s is-hidden-m rounded-corners overflow-hidden {{ {s: 4} | spacingClasses({margin: ['bottom']}) }}">
          {% set imageModel = installation.featuredImageList[0] | objectAssign({lazyload: true}) %}
          {% set tasl = {name: 'Tasl', model: imageModel}
            if (imageModel.title or imageModel.source.name or imageModel.copyright.name or imageModel.license)
            else null
          %}
          {% componentJsx 'CaptionedImage', bodyPart.value, [
            {name: 'Image', model: imageModel},
            tasl
          ] %}
        </div>

        <div class="{{ {s: 3, m: 4, l: 5, xl: 5} | spacingClasses({margin: ['bottom']}) }} body-text">
          {% componentJsx 'BasicBody', {body: installation.body} %}
        </div>
      </div>
    </div>
  </div>
{% endblock %}
