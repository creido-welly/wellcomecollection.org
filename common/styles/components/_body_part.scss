$narrow-width: (5/7) * 100%; // calculates the narrow column width as a percentage of the main column.
$narrow-width-xlarge: (4/6) * 100%;
$center-width-large: (6/7) * 100%; // calculates the halfway point of the container, as a percentage of the main column.

.body-part {
  display: block;
  z-index: 2;
  position: relative;

  @include respond-between('small', 'large') {
    /* stylelint-disable declaration-no-important */
    top: 0 !important;
    /* stylelint-enable */
  }

  @include respond-to('large') {
    padding-right: map-get($gutter-width, 'large');
  }
}

.body-part--full-width {
  width: 100vw;
  z-index: 1;
  left: 50%;
  margin-left: -50vw;
  padding: 0 map-get($container-padding, 'small');
  clear: both;

  @include respond-to('medium') {
    padding: 0 map-get($container-padding, 'medium');
  }

  @include respond-to('large') {
    padding: 0 map-get($container-padding, 'large');
  }

  .article & {
    @include respond-to('large') {
      left: $center-width-large;
      margin-right: calc((#{$narrow-width} + #{map-get($gutter-width, 'large')}) * -1);
      padding-top: $vertical-space-unit;
      margin-top: -$vertical-space-unit;
      /* stylelint-disable declaration-no-important */
      opacity: 1 !important;
      /* stylelint-enable */
    }
  }
}

.body-part--no-pad {
  padding: 0;
}

.body-part__extend-to-right {
  @include respond-to('medium') {
    padding-left: calc(12.5% + #{map-get($container-padding, 'medium') - 10});
  }

  @include respond-to('large') {
    padding-left: map-get($container-padding, 'large');
  }

  @include respond-to('xlarge') {
    position: relative;
    width: $container-width-max - (map-get($container-padding, 'large') * 2);
    margin-left: 50%;
    left: (($container-width-max - (map-get($container-padding, 'large') * 2)) / 2) * (-5/6);
    padding: 0;
  }
}

.body-part--sticky {
  @include respond-to('large') {
    padding-right: 0;

    @supports (width: calc(10px + 10px)) {
      float: right;
      clear: right;
      width: $narrow-width;
      margin-right: -$narrow-width;
    }
  }
}

.body-part--supporting {
  margin: auto;
  max-width: 600px;
}

/* stylelint-disable plugin/selector-bem-pattern */
.sticky-wrapper:last-of-type {
  @include clearfix;
}

.sticky-applied {
  @include respond-to('large') {
    @supports (width: calc(10px + 10px)) {
      position: sticky;
      top: $vertical-space-unit;
    }
  }
}
/* stylelint-enable */

$scroller-offset: map-get($container-padding, 'large');

.body-part__scroller {
  overflow: auto;
}

.body-content-list {
  list-style: none;
  margin: 0 0 2em;
  padding: 0;
}

.body-content-list__item {
  list-style: none;

  &:before {
    content: '';
    width: 0.35em;
    height: 0.35em;
    display: inline-block;
    vertical-align: middle;
    border-radius: 0.1em;
    background: color('currentColor');
    margin-right: 0.4em;
  }
}
