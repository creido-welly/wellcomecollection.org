{% extends 'docs/cardigan.njk' %}

{% block body %}
  <p>The architecture we have composed consists of two parts. [Structure](#structure) and [Style](#style).</p>

  <h2>Structure</h2>
  <a name="structure"></a>

  <h3>App shell</h3>

  <p>The app shell contains parts of the layout that rarely change as the app is used.</p>
  <p>This may contain small state changes, such as the selected state of a navigation changing.</p>
  <p>The app shell will also have a placeholder for the <a href="#page">page</a>.</p>
  <p>The app shell may also contain <a href="#layout-elements">layouts</a>.</p>
  <p><a href="https://developers.google.com/web/fundamentals/architecture/app-shell">You can read this article for a more detailed description for an app shell model and it's benefits</a>.</p>

  <h3>Page</h3>
  <a name="page"></a>

  <p>The page is the content that is loaded dependent on the route requested by the client, e.g. `/explore`.</p>
  <p>The page can consist of one or more <a href="#layout-elements">layouts</a>.</p>
  <p>The page will rarely, if ever, have <a href="#style">styles</a>.</p>

  <h3>Layout elements</h3>
  <a name="layout-elements"></a>

  <p>Elements are intentionally stupid objects, including:</p>
  <ul>
    <li>Rows: allows styling of full width</li>
    <li>Containers: Constrains the contained content to a certain width or behavior.</li>
  </ul>

  <p>Layout elements may contain <a href="#components">components</a>, but may not contain themselves.</p>
  <p>Layout elements will always manage their own [style](#style), but have access to <a href="#global-styles">global styles</a>.</p>

  <h3>Components</h3>
  <a name="components"></a>

  <p>Components are the pieces of the puzzle that make up the great chunk of information within the
  application. TODO: add info.</p>

  <hr class="divider divider--keyline divider--pumice" />

  <h2>Style</h2>
  <a name="style"></a>

  <h3>Global style</h3>
  <a name="global-styles"></a>

  <p>Globally accessible, reusable styles are defined in
  <a href="https://github.com/wellcometrust/wellcomecollection.org/blob/master/client/scss/utilities/_root-scope-classes.scss">`_root-scope-classes.scss`</a>.</p>

  <h4>Typography classes</h4>
  <p>We have a <a href="/components/detail/typography.html">predefined set of typography styles</a>. This means we can avoid redeclaring font properties every time we create a new component.</p>
  <p>Instead, there is a class for each typography style at each breakpoint, and a <code>fontClasses</code> nunjucks filter that simplifies the process of adding these classes to the markup.</p>
  <p>Each typography style has a name, e.g. <code>WB3</code> (the third largest Wellcome Bold style). If we want the same typography style to be output at every breakpoint, we can write the following:
  <br /><br />
  {% raw %}
  <code>{{ 'WB3' | fontClasses }}</code>
  <br /><br />
  Alternatively, if we want to have different styles at each breakpoint, we can write:
  <br /><br />
  <code>{{ {s:'WB4', m:'WB3', l:'WB2', xl:'WB1'} | fontClasses }}</code>
  <br /><br />
  Finally, if we want to change type style between, say, the small and the medium breakpoint, then keep the style the same at all larger breakpoints, we can leave off the keys we don't want to change:
  <br /><br />
  <code>{{ {s:'WB3', m:'WB2'} | fontClasses }}</code>
  <br /><br />
  which is equivalent to:
  <br /><br />
  <code>{{ {s:'WB3', m:'WB2', l:'WB2', xl:'WB2'} | fontClasses }}</code>
  {% endraw %}
  </p>


  <h3>Width</h3>

  <p>The layout has a maximum width of {{ breakpoints[breakpoints.length - 1].size }}.</p>

  <h3>Breakpoints</h3>

  <p>The layout utilises {{ breakpoints.length }} breakpoints:</p>

  <ul>
    {% for breakpoint in breakpoints %}
      <li>`{{ breakpoint.name }}`: {% if breakpoint.name === 'xlarge' %} > {% else %} >= {% endif %} {{ breakpoint.size }}</li>
    {% endfor %}
  </ul>

  <h3>Grid columns/spacing</h3>
  <p>The grid consists of 12 columns and breakpoints determine the spacing between the columns, i.e. gutters, and the space either side of the layout, i.e. margins.</p>

  <ul>
    {% for gridSize in gridConfig %}
      <li><strong>{{ gridSize.name }}:</strong> {{ gridSize.gutterWidth }} gutters, {{ gridSize.marginWidth }} margins</li>
    {% endfor %}
  </ul>
{% endblock %}
