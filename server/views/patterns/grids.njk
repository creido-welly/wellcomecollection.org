{% extends "views/layout/patterns.njk" %}
{% block body %}

<h1>Layout</h1>

<div class="grid">
  <div class="grid__cell grid__cell--s4">
    <h2>Width</h2>
    <p>The layout has a maximum width of 1424px.</p>
  </div>
  <div class="grid__cell">
   <h2>Breakpoints</h2>
    <p>The layout utilises 3 breakpoints:</p>
    <ul>
        <li>Small: >= 0</li>
        <li>Medium: >= 600px</li>
        <li>Large: >= 960px</li>
    </ul>
  </div>
</div>

<div class="grid">
  <div class="grid__cell  grid__cell--s4">
   <h2>Grid columns/spacing</h2>
    <p>Breakpoints determine the number of columns in the layout, the spacing between the columns,
    i.e. gutters, and the space either side of the layout, i.e. margins.</p>
  </div>
  <div class="grid__cell">
    <h3>Small</h3>
    <ul>
        <li>Number of columns: 4</li>
        <li>Width of gutters: 18px </li>
        <li>Width of margins: 30px</li>
    </ul>
    <h3>Medium</h3>
    <ul>
        <li>Number of columns: 8</li>
        <li>Width of gutters: 24px</li>
        <li>Width of margins: 42px</li>
    </ul>
    <h3>Large</h3>
    <ul>
        <li>Number of columns: 12</li>
        <li>Width of gutters: 30px</li>
        <li>Width of margins: 60px</li>
    </ul>
  </div>
</div>

<h2>Markup</h2>

<h3>Basic grid</h3>

<p>Layouts are created using two main CSS classes, '.grid' and '.grid__cell'.</p>

<p>Any number of grid cells can be placed in a grid container and
by default they will be equally spaced out.</p>

<h4>Code example</h4>

<pre><code>&lt;div class="grid"&gt;
    &lt;div class="grid__cell"&gt;
        {content of the cell goes here}
    &lt;/div&gt;
    &lt;div class="grid__cell"&gt;
        {content of the cell goes here}
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class="grid"&gt;
    &lt;div class="grid__cell"&gt;
        {content of the cell goes here}
    &lt;/div&gt;
    &lt;div class="grid__cell"&gt;
        {content of the cell goes here}
    &lt;/div&gt;
    &lt;div class="grid__cell"&gt;
        {content of the cell goes here}
    &lt;/div&gt;
&lt;/div&gt;</code></pre>

<div class="grid">
    <div class="grid__cell">
        {% include "views/components/grid-placeholder.njk" %}
    </div>
    <div class="grid__cell">
        {% include "views/components/grid-placeholder.njk" %}
    </div>
</div>

<div class="grid">
    <div class="grid__cell">
        {% include "views/components/grid-placeholder.njk" %}
    </div>
    <div class="grid__cell">
        {% include "views/components/grid-placeholder.njk" %}
    </div>
    <div class="grid__cell">
        {% include "views/components/grid-placeholder.njk" %}
    </div>
</div>

<h3>Dividers</h3>

<p>Applying a class of '.grid--dividers' to the containing '.grid' div
 will introduce vertical lines into the gutters.</p>

 <h4>Code example</h4>

<pre><code>&lt;div class="grid grid--dividers"&gt;
    &lt;div class="grid__cell"&gt;
        {content of the cell goes here}
    &lt;/div&gt;
    &lt;div class="grid__cell"&gt;
        {content of the cell goes here}
    &lt;/div&gt;
    &lt;div class="grid__cell"&gt;
        {content of the cell goes here}
    &lt;/div&gt;
&lt;/div&gt;</code></pre>

<div class="grid grid--dividers">
    <div class="grid__cell">
        {% include "views/components/grid-placeholder.njk" %}
    </div>
    <div class="grid__cell">
        {% include "views/components/grid-placeholder.njk" %}
    </div>
    <div class="grid__cell">
        {% include "views/components/grid-placeholder.njk" %}
    </div>
</div>

<h3>Size modifiers</h3>

<p>Modifier classes can be used to determine exactly how many columns a cell will take up at a given breakpoint.</p>
<p><small><strong>N.B. remember that there are different numbers of columns avaliable at each breakpoint:
small(s) - 4; medium(m) - 8; large(l) - 12.</strong></small></p>

<p>Size modifier classes take the form '.grid__cell--xy', where x is either s, m or l
 and y is the number of columns the cell should span.  Applying a size modifier class to
 '.grid__cell' div will make the cell span the designated number of columns within the specified breakpoint only.</p>

<h4>Code example</h4>

<pre><code>&lt;div class="grid"&gt;
    &lt;div class="grid__cell grid__cell--s2 grid__cell--m2 grid__cell--l4"&gt;
        {content of the cell goes here}
    &lt;/div&gt;
&lt;/div&gt;</code></pre>

<div class="grid">
    <div class="grid__cell  grid__cell--s2 grid__cell--m2 grid__cell--l4">
        {% include "views/components/grid-placeholder.njk" %}
    </div>
</div>

<p>In above example, the cell will take up half the grid on small screens (2/4),
 a quarter on medium screens (2/8) and a a third on large screens (4/12).</p>

<h3>Container queries</h3>

<p>Using the cell modifiers, we can reason about what proportion of the screen will be covered at different breakpoints.</p>

<p>Combining the breakpoint and cell modifier information, we can create pseudo container queries (also known as element queries), enabling components to take on different styles based on their size in the viewport, rather than the size of the viewport itself.</p>

<p>The <code>container-query()</code> mixin accepts a size-key ('s', 'm', or 'l') and a number of columns ('1' â€“ '12') as arguments.</p>
<p>These arguments map to the cell modifier strings, and they determine the viewport sizes at which the mixin's <code>@content</code> will be rendered in cells with that modifier applied.</p>

<h4>Code example</h4>
<h5>Sass</h5>
<pre><code>
@include container-query('s', '1') {
  background: color('blue');
}

@include container-query('m', '2') {
  background: color('red');
}

@include container-query('l', '3') {
  background: color('charcoal');
}</code></pre>

<h5>Markup</h5>
<pre><code>&lt;div class="grid"&gt;
    &lt;div class="grid__cell grid__cell--s1 grid__cell--m2 grid__cell--l3"&gt;
        {content of the cell goes here}
    &lt;/div&gt;
&lt;/div&gt;</code></pre>

<div class="grid grid--start">
  <div class="grid__cell grid__cell--s1 grid__cell--m2 grid__cell--l3">
    {% include "views/components/grid-placeholder.njk" %}
  </div>
</div>

<h3>Alignment modifiers</h3>

<p>Applying a class of either '.grid--start', '.grid--center' or '.grid--end' to the containing '.grid' div
 will determine how grid cells are aligned horizontally.</p>

<h4>Code example</h4>

<pre><code>&lt;div class="grid grid--start"&gt;
    &lt;div class="grid__cell grid__cell--s2 grid__cell--m4 grid__cell--l6"&gt;
        {content of the cell goes here}
    &lt;/div&gt;
&lt;/div&gt;</code></pre>

<div class="grid grid--start">
    <div class="grid__cell grid__cell--s2 grid__cell--m4 grid__cell--l6">
        {% include "views/components/grid-placeholder.njk" %}
    </div>
</div>

<pre><code>&lt;div class="grid grid--center"&gt;
    &lt;div class="grid__cell grid__cell--s2 grid__cell--m4 grid__cell--l6"&gt;
        {content of the cell goes here}
    &lt;/div&gt;
&lt;/div&gt;</code></pre>

<div class="grid grid--center">
    <div class="grid__cell grid__cell--s2 grid__cell--m4 grid__cell--l6">
        {% include "views/components/grid-placeholder.njk" %}
    </div>
</div>

<pre><code>&lt;div class="grid grid--end"&gt;
    &lt;div class="grid__cell grid__cell--s2 grid__cell--m4 grid__cell--l6"&gt;
        {content of the cell goes here}
    &lt;/div&gt;
&lt;/div&gt;</code></pre>

<div class="grid grid--end">
    <div class="grid__cell grid__cell--s2 grid__cell--m4 grid__cell--l6">
        {% include "views/components/grid-placeholder.njk" %}
    </div>
</div>

<h3>Nesting</h3>

<p>Grids can be nested. This is useful in combination with size modifier classes,
when the layout needs to change in more complex ways between breakpoints.</p>

<h4>Code example</h4>

<pre><code>&lt;div class="grid"&gt;
    &lt;div class="grid__cell grid__cell--s4 grid__cell--m4 grid__cell--l4"&gt;
        {content of the cell goes here}
    &lt;/div&gt;
    &lt;div class="grid__cell"&gt;
        &lt;div class="grid"&gt;
            &lt;div class="grid__cell grid__cell--m8"&gt;
                {content of the cell goes here}
            &lt;/div&gt;
            &lt;div class="grid__cell grid__cell--m8"&gt;
                {content of the cell goes here}
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;</code></pre>

<div class="grid">
    <div class="grid__cell grid__cell--s4 grid__cell--m4 grid__cell--l4">
        {% include "views/components/grid-placeholder.njk" %}
    </div>
    <div class="grid__cell">
        <div class="grid">
            <div class="grid__cell grid__cell--m8">
                {% include "views/components/grid-placeholder.njk" %}
            </div>
            <div class="grid__cell grid__cell--m8">
                {% include "views/components/grid-placeholder.njk" %}
            </div>
        </div>
    </div>
</div>

<h3>Breakout</h3>

<p>Applying a class of '.grid--breakout' to the containing '.grid' div
 will break it out of the container and stretch it the width of the screen.</p>

 <p>This only works on top level '.grid' divs that are centered.</p>

<h4>Code example</h4>

<pre><code>&lt;div class="grid grid--breakout"&gt;
    &lt;div class="grid__cell"&gt;
        {content of the cell goes here}
    &lt;/div&gt;
&lt;/div&gt;</code></pre>

<div class="grid grid--breakout">
    <div class="grid__cell">
        {% include "views/components/grid-placeholder.njk" %}
    </div>
</div>

{% endblock %}
